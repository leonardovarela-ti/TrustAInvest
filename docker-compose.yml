services:
  postgres:
    image: postgres:16
    container_name: kyc-verifier-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: trustainvest
      POSTGRES_PASSWORD: trustainvest
      POSTGRES_DB: trustainvest
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./migrations:/docker-entrypoint-initdb.d/migrations
      - ./scripts/init-admin-user.sql:/scripts/init-admin-user.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trustainvest"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,dynamodb,cognito,apigateway,lambda,sqs,sns,kms
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - AWS_DEFAULT_REGION=us-east-1
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - ./localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts/init-localstack.sh:/docker-entrypoint-initdb.d/init-localstack.sh
      - ./init-localstack.sh:/docker-entrypoint-initdb.d/init-kyc-resources.sh
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  user-service:
    build:
      context: .
      dockerfile: ./cmd/user-service/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=trustainvest
      - DB_PASSWORD=trustainvest
      - DB_NAME=trustainvest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy

  account-service:
    build:
      context: .
      dockerfile: ./cmd/account-service/Dockerfile
    ports:
      - "8081:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=trustainvest
      - DB_PASSWORD=trustainvest
      - DB_NAME=trustainvest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - USER_SERVICE_URL=http://user-service:8080
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
      user-service:
        condition: service_started

  trust-service:
    build:
      context: .
      dockerfile: ./cmd/trust-service/Dockerfile
    ports:
      - "8082:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=trustainvest
      - DB_PASSWORD=trustainvest
      - DB_NAME=trustainvest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - USER_SERVICE_URL=http://user-service:8080
      - ACCOUNT_SERVICE_URL=http://account-service:8080
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
      user-service:
        condition: service_started
      account-service:
        condition: service_started

  investment-service:
    build:
      context: .
      dockerfile: ./cmd/investment-service/Dockerfile
    ports:
      - "8083:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=trustainvest
      - DB_PASSWORD=trustainvest
      - DB_NAME=trustainvest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - USER_SERVICE_URL=http://user-service:8080
      - ACCOUNT_SERVICE_URL=http://account-service:8080
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
      user-service:
        condition: service_started
      account-service:
        condition: service_started

  document-service:
    build:
      context: .
      dockerfile: ./cmd/document-service/Dockerfile
    ports:
      - "8084:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=trustainvest
      - DB_PASSWORD=trustainvest
      - DB_NAME=trustainvest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy

  notification-service:
    build:
      context: .
      dockerfile: ./cmd/notification-service/Dockerfile
    ports:
      - "8085:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=trustainvest
      - DB_PASSWORD=trustainvest
      - DB_NAME=trustainvest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy

  user-registration-service:
    build:
      context: .
      dockerfile: ./Dockerfile.registration
    ports:
      - "8086:8080"
    environment:
      - SERVER_PORT=8080
      - SERVER_HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=trustainvest
      - DB_PASSWORD=trustainvest
      - DB_NAME=trustainvest
      - DATABASE_URL=postgres://trustainvest:trustainvest@postgres:5432/trustainvest
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - KYC_QUEUE_URL=http://localstack:4566/000000000000/kyc-queue
      - KYC_TOPIC_ARN=arn:aws:sns:us-east-1:000000000000:kyc-topic
      - NOTIFICATION_QUEUE_URL=http://localstack:4566/000000000000/notification-queue
      - NOTIFICATION_TOPIC_ARN=arn:aws:sns:us-east-1:000000000000:notification-topic
      - KMS_KEY_ID=alias/trustainvest-key
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
    networks:
      - backend

  kyc-worker:
    build:
      context: .
      dockerfile: ./Dockerfile.kyc-worker
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=trustainvest
      - DB_PASSWORD=trustainvest
      - DB_NAME=trustainvest
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - KYC_QUEUE_URL=http://localstack:4566/000000000000/kyc-queue
      - KYC_TOPIC_ARN=arn:aws:sns:us-east-1:000000000000:kyc-topic
      - NOTIFICATION_QUEUE_URL=http://localstack:4566/000000000000/notification-queue
      - NOTIFICATION_TOPIC_ARN=arn:aws:sns:us-east-1:000000000000:notification-topic
      - KMS_KEY_ID=alias/trustainvest-key
      - KYC_PROVIDER_URL=https://example.com/kyc-api
      - KYC_PROVIDER_API_KEY=test-api-key
      - WORKER_POOL_SIZE=3
      - WORKER_BATCH_SIZE=10
      - WORKER_POLL_INTERVAL_SECONDS=10
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy
    networks:
      - backend

  kyc-verifier-service:
    build:
      context: .
      dockerfile: cmd/kyc-verifier-service/Dockerfile
    container_name: kyc-verifier-service
    environment:
      DATABASE_URL: postgres://trustainvest:trustainvest@postgres:5432/trustainvest?sslmode=disable
      JWT_SECRET: your-secret-key
      PORT: 8090
      CORS_ALLOWED_ORIGINS: "*"
    ports:
      - "8090:8090"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  kyc-verifier-ui:
    image: nginx:alpine
    container_name: kyc-verifier-ui
    volumes:
      - ./kyc-verifier-ui/web:/usr/share/nginx/html
      - ./kyc-verifier-ui/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "3000:3000"
    depends_on:
      - kyc-verifier-service
    environment:
      API_URL: http://kyc-verifier-service:8090/api
    networks:
      - backend

  customer-app:
    build: ./customer-app
    ports:
      - "3001:8080"
    environment:
      - API_BASE_URL=http://user-registration-service:8080
    depends_on:
      - user-registration-service
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  localstack-data:
